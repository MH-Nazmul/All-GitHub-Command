{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Template": {
		"prefix": "cp",
		"body": [
			"// MH_Nazmul",
			"// Let it be as simple",
			"",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define pb push_back",
		  "#define nl cout<<\"\\n\"",
		  "#define all(x) x.begin(), x.end()",
		  "#define allr(x) x.rbegin(), x.rend()",
		  "#define f(a,b,c) for(int a=b;a<c;a++)",
		  "#define cin(vec,n) f(i,0,n){cin>>vec[i];}",
		  "using ll= long long;",
		  "const int N = 2e5+10;",
		  "const int M = 1e9+7;",
		  "",
		  "void solve(void)",
		  "{",
		  "    ",
		  "}",
		  "",
		  "int main()",
		  "{",
		  " ios_base::sync_with_stdio(false);",
		  " cin.tie(NULL);",
		  " int t=1;",
		  " ${1://}cin>>t;",
		  " while (t--)",
		  " solve();",
		  " return 0;",
		  "}",

		],
		"description": "Template"
	  }

	  "competitive template": {
		"prefix": "cpp",
		"body": [
		  "// MH_Nazmul",
		  "// Let it be as simple",
		  "",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "//=====================================Definition==============================",
		  "const int M = 1e9 + 7;",
		  "const int N = 2e5 + 10;",
		  "#define pb push_back   ",
		  "using ll = long long int;",
		  "#define rr return",
		  "#define fi first",
		  "#define sc second",
		  "#define nl cout << '\\n'",
		  "#define all(x) x.begin(), x.end()     ",
		  "#define allr(x) x.rbegin(), x.rend()  ",
		  "#define f(a,b,c) for(int a=b;a<c;a++)",
		  "#define cin(vec,n) f(i,0,n){cin>>vec[i];}",
		  "void solve(void);",
		  "// include yesno if you need",
		  "//=====================================LETS BEGIN==============================",
		  "",
		  "void solve(void)",
		  "{",
		  "  ",
		  "}",
		  "",
		  "int main()",
		  "{",
		  "  // cout << fixed << showpoint << setprecision(0);",
		  "  ios_base::sync_with_stdio(false);",
		  "  cin.tie(NULL);",
		  "  int t = 1, Test;",
		  "  ${1://}cin >> t;",
		  "  for (Test = 1; Test <= t; Test++)",
		  "  {",
		  "    // cout << \"Case \" << Test << \": \";",
		  "    solve();",
		  "  }",
		  "  return 0;",
		  "}",
		  "/*",
		  "freopen(\"input.txt\", \"r\", stdin );",
		  "freopen(\"output.txt\",\"w\", stdout);",
		  "*/",
		  "",
		],
		"description": "competitive template"
	  }

	  "Moduler arithmetics": {
		"prefix": "mods",
		"body": [
		  "",
		  "//---------------------------------------------------------------------------",
		  "inline ll Norm(ll a, ll M)",
		  "{",
		  "     a %= M;",
		  "     if (a < 0)",
		  "          a += M;",
		  "     return a;",
		  "}",
		  "inline ll modAdd(ll a, ll b, ll M)",
		  "{",
		  "     a = Norm(a, M), b = Norm(b, M);",
		  "     return (a + b) % M;",
		  "}",
		  "inline ll modSub(ll a, ll b, ll M)",
		  "{",
		  "     a = Norm(a, M), b = Norm(b, M);",
		  "     ll S = (a - b) % M;",
		  "     if (S < 0)",
		  "          S += M;",
		  "     return S;",
		  "}",
		  "inline ll modMul(ll a, ll b, ll M)",
		  "{",
		  "     a = Norm(a, M), b = Norm(b, M);",
		  "     return (a * b) % M;",
		  "}",
		  "inline ll bigMod(ll a, ll b, ll M)",
		  "{",
		  "     ll res = 1;",
		  "     while (b > 0)",
		  "     {",
		  "          if (b & 1LL)",
		  "               res = modMul(res, a, M);",
		  "          a = modMul(a, a, M);",
		  "          b >>= 1LL;",
		  "     }",
		  "     return res;",
		  "}",
		  "inline ll fermats_inverse(ll a, ll M) { return bigMod(a, M - 2, M); } // (a^-1) ... M must be prime; (a,M) must be coprime",
		  "//you have to remember if a%b!=0 then a*b^-1=garbage"
		  "//---------------------------------------------------------------------------",
		  "",
		  ""
		],
		"description": "Moduler arithmetics"
	  }


	  "printing yes or no": {
		"prefix": "yesno",
		"body": [
		  "#define yes cout<<\"yes\\n\"",
		  "#define Yes cout<<\"Yes\\n\"",
		  "#define YES cout<<\"YES\\n\"",
		  "#define no cout << \"no\\n\"",
		  "#define No cout <<\"No\\n\"",
		  "#define NO cout << \"NO\\n\"",
		  ""
		],
		"description": "printing yes or no"
	  }


	  "policy based data structure": {
		"prefix": "pbds",
		"body": [
		  "#include <ext/pb_ds/assoc_container.hpp>",
		  "#include <ext/pb_ds/tree_policy.hpp>",
		  "using namespace __gnu_pbds;",
		  "",
		  "template <class T> // o_set<ll> st;  st.order_of_key(x);",
		  "using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		  ""
		],
		"description": "policy based data structure"
	  }

	  "sieve between 1e9": {
		"prefix": "sieve",
		"body": [
		  " int lim = 1e7;",
		  "  vector<bool> check(lim + 1);",
		  "  vector<int> sieve;",
		  "  for (int i = 2; i * i <= lim; i++)",
		  "  {",
		  "    if (check[i] == false)",
		  "    {",
		  "      sieve.push_back(i);",
		  "      for (int j = i * i; j <= lim; j += i)",
		  "      {",
		  "        check[j] = true;",
		  "      }",
		  "    }",
		  "  }",
		  ""
		],
		"description": "sieve between 1e9"
	  }



      "pair compare": {
		"prefix": "cmp",
		"body": [
		  "bool cmp(pair<int, int> a, pair<int, int> b)",
		  " {",
		  "    if (a.first <= b.first)",
		  "    {",
		  "        if (a.first < b.first)",
		  "            return true;",
		  "        else",
		  "            return a.second < b.second;",
		  "    }",
		  "    else",
		  "        return false;",
		  " }",
		  ""
		],
		"description": "cmp"
	  }


	  "i for loop": {
		"prefix": "fi",
		"body": [
		  "for(int i = 0;i < n${1:};i++)",
		  "   {",
		  "    ",
		  "   }",
		  " "
		],
		"description": "single for loop"
	  }

	  "j for loop": {
		"prefix": "fj",
		"body": [
		  "for(int j = 0;j < m${1:};j++)",
		  "   {",
		  "    ",
		  "   }",
		  " "
		],
		"description": "single for loop"
	  }

	  "k for loop": {
		"prefix": "fk",
		"body": [
		  "for(int k = 0;k < x${1:};k++)",
		  "   {",
		  "    ",
		  "   }",
		  " "
		],
		"description": "single for loop"
	  }



	  "printing elements": {
		"prefix": "vcout",
		"body": [
		  "",
		  " for(auto it:arr${1:})",
		  "   {",
		  "     cout<<it<<\" \";",
		  "   }",
		  " cout<<\"\\n\";",
		  ""
		],
		"description": "printing elements"
	  }


	  "Debugger": {
		"prefix": "debugger",
		"body": [
		  "//-------------------------------------------------------------------------",
		  "template <typename F, typename S>",
		  "ostream &operator<<(ostream &os, const pair<F, S> &p) { return os << \"(\" << p.first << \", \" << p.second << \")\"; }",
		  "template <typename T>",
		  "ostream &operator<<(ostream &os, const vector<T> &v)",
		  "{",
		  "    os << \"{\";",
		  "    for (auto it = v.begin(); it != v.end(); ++it)",
		  "    {",
		  "        if (it != v.begin())",
		  "            os << \", \";",
		  "        os << *it;",
		  "    }",
		  "    return os << \"}\";",
		  "}",
		  "template <typename T>",
		  "ostream &operator<<(ostream &os, const set<T> &v)",
		  "{",
		  "    os << \"[\";",
		  "    for (auto it = v.begin(); it != v.end(); ++it)",
		  "    {",
		  "        if (it != v.begin())",
		  "            os << \", \";",
		  "        os << *it;",
		  "    }",
		  "    return os << \"]\";",
		  "}",
		  "template <typename T>",
		  "ostream &operator<<(ostream &os, const multiset<T> &v)",
		  "{",
		  "    os << \"[\";",
		  "    for (auto it = v.begin(); it != v.end(); ++it)",
		  "    {",
		  "        if (it != v.begin())",
		  "            os << \", \";",
		  "        os << *it;",
		  "    }",
		  "    return os << \"]\";",
		  "}",
		  "template <typename F, typename S>",
		  "ostream &operator<<(ostream &os, const map<F, S> &v)",
		  "{",
		  "    os << \"[\";",
		  "    for (auto it = v.begin(); it != v.end(); ++it)",
		  "    {",
		  "        if (it != v.begin())",
		  "            os << \", \";",
		  "        os << it->first << \" = \" << it->second;",
		  "    }",
		  "    return os << \"]\";",
		  "}",
		  "#define dbg(args...)            \\",
		  "    do                          \\",
		  "    {                           \\",
		  "        cerr << #args << \" : \"; \\",
		  "        faltu(args);            \\",
		  "    } while (0)",
		  "void faltu()",
		  "{",
		  "    cerr << endl;",
		  "}",
		  "template <typename T>",
		  "void faltu(T a[], int n)",
		  "{",
		  "    for (int i = 0; i < n; ++i)",
		  "        cerr << a[i] << ' ';",
		  "    cerr << endl;",
		  "}",
		  "template <typename T, typename... hello>",
		  "void faltu(T arg, const hello &...rest)",
		  "{",
		  "    cerr << arg << ' ';",
		  "    faltu(rest...);",
		  "}",
		  "",
		  "//--------------------------------------------------------------------------"
		],
		"description": "Debugger"
	  }

}
